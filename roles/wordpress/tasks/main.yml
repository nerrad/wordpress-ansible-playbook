---
- name: Generate random password for wp db user
  command: php -r "echo md5(random_bytes(10));"
  register: db_pass
  when: >
    (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
    and item.name not in domains_to_skip
  with_items:
    - "{{ domains }}"

- name: Create WordPress database
  mysql_db:
    name: '{{ item.wp.db_name }}'
    state: present
  when: >
    (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
    and item.name not in domains_to_skip
  with_items:
    - "{{ domains }}"

- name: Create WordPress database user
  mysql_user:
    name: '{{ item.0.wp.db_name }}'
    password: '{{ item.1.stdout }}'
    priv: "{{ item.0.wp.db_name }}.*:ALL"
    host: localhost
    state: present
    update_password: on_create
  when: >
    (item.1.skipped is undefined or not item.1.skipped)
  with_together:
    - "{{ domains }}"
    - "{{ db_pass.results }}"

- block:
  - name: Creates directory for domain web files
    file:
      path: '/home/{{ remote_web_user }}/www/{{ item.name }}'
      state: directory
    when: >
      (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
      and item.name not in domains_to_skip
    with_items:
      - "{{ domains }}"

  - name: Create logs directory
    file:
      path: '/home/{{ remote_web_user }}/www/{{ item.name }}/logs'
      state: directory
    when: >
      (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
      and item.name not in domains_to_skip
    with_items:
      - "{{ domains }}"

  # installing WordPress via wp-cli
  - name: Is WordPress already downloaded
    stat: path=/home/{{ remote_web_user }}/www/{{ item.name }}/wp-load.php
    register: wp_downloaded
    when: >
      (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
      and item.name not in domains_to_skip
    with_items:
      - "{{ domains }}"

  - name: Download WordPress to domain directory via wp-cli
    command: wp core download
    args:
      chdir: '/home/{{ remote_web_user }}/www/{{ item.0.name }}'
    when: >
      (item.1.skipped is undefined or not item.1.skipped)
      and not item.1.stat.exists
    with_together:
      - "{{ domains }}"
      - "{{ wp_downloaded.results }}"

  - name: Is WordPress config already setup
    stat: path=/home/{{ remote_web_user }}/www/{{ item.name }}/wp-config.php
    register: wp_configured
    when: >
      (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
      and item.name not in domains_to_skip
    with_items:
      - "{{ domains }}"

  - name: Setup WordPress Config using wp-cli
    command: wp config create --dbname={{ item.0.wp.db_name|quote }} --dbuser={{ item.0.wp.db_name|quote }} --dbpass={{item.2.stdout|quote}}
    args:
      chdir: '/home/{{ remote_web_user }}/www/{{ item.0.name }}'
    when: >
      (item.1.skipped is undefined or not item.1.skipped)
      and not item.1.stat.exists
    with_together:
      - "{{ domains }}"
      - "{{ wp_configured.results }}"
      - "{{ db_pass.results }}"

  - name: Is WordPress already installed
    command: wp core is-installed
    args:
      chdir: '/home/{{ remote_web_user }}/www/{{ item.name }}'
    register: wp_installed
    ignore_errors: true
    when: >
      (("all" in domains_to_use and "none" in domains_to_skip) or item.name in domains_to_use)
      and item.name not in domains_to_skip
    with_items:
     - "{{ domains }}"

  - name: Install WordPress using wp-cli
    command: wp core install --url={{ item.0.name|quote }} --title={{ item.0.wp.site_title|quote }} --admin_user={{ item.0.wp.admin_user|quote }} --admin_password={{ item.0.wp.admin_pass|quote }} --admin_email={{ item.0.wp.admin_email|quote }}
    args:
      chdir: '/home/{{ remote_web_user }}/www/{{ item.0.name }}'
    when: >
      (item.1.skipped is undefined or not item.1.skipped)
      and 'Error:' not in item.1.stderr
      and item.1.rc != 0
      and (item.0.wp.install is undefined or item.0.wp.install == 'singlesite')
    with_together:
     - "{{ domains }}"
     - "{{ wp_installed.results }}"

  - name: Install WordPress Multisite using wp-cli
    command: wp core multisite-install --url={{ item.0.name|quote }} --title={{ item.0.wp.site_title|quote }} {{ (item.0.wp.network_type is defined and item.0.wp.network_type == 'subdomain') | ternary('--subdomains', '') }} --admin_user={{ item.0.wp.admin_user|quote }} --admin_password={{ item.0.wp.admin_pass|quote }} --admin_email={{ item.0.wp.admin_email|quote }}
    args:
      chdir: '/home/{{ remote_web_user }}/www/{{ item.0.name }}'
    when: >
      (item.1.skipped is undefined or not item.1.skipped)
      and 'Error:' not in item.1.stderr
      and item.1.rc != 0
      and item.0.wp.install is defined
      and item.0.wp.install == 'multisite'
    with_together:
     - "{{ domains }}"
     - "{{ wp_installed.results }}"


  become: true
  become_user: "{{ remote_web_user }}"